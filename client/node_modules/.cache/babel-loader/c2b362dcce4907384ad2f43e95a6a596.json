{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sevi/Desktop/corona/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/sevi/Desktop/corona/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/sevi/Desktop/corona/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/sevi/Desktop/corona/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/sevi/Desktop/corona/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/sevi/Desktop/corona/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/sevi/Desktop/corona/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';// import ReactDOM from 'react-dom';\nimport axios from'axios';// Mapbox\n// import ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\n// import * as MapboxGL from 'mapbox-gl';\nimport mapboxgl from'mapbox-gl';// DayPicker\nimport DayPickerInput from'react-day-picker/DayPickerInput';import'react-day-picker/lib/style.css';// Material UI\nimport{makeStyles}from'@material-ui/core/styles';import Button from'@material-ui/core/Button';import Table from'@material-ui/core/Table';import TableBody from'@material-ui/core/TableBody';import TableCell from'@material-ui/core/TableCell';import TableContainer from'@material-ui/core/TableContainer';import TableHead from'@material-ui/core/TableHead';import TableRow from'@material-ui/core/TableRow';import Paper from'@material-ui/core/Paper';// map init\nvar accessToken='pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ';var stateColors={};var hoverCount=0;// map styles\nvar linePaint={'line-color':'white','line-width':2};var fillPaint={\"fill-color\":\"white\",\"fill-opacity\":0.7};// api calls\nvar stateDataQuery='/api/getStateData?date=';var geojsonQuery='/api/getGeojsonData?date=';var dateSelection='2020-1-20';// table styles\nvar useStyles=makeStyles({table:{minWidth:400}});var newgeojson={};newgeojson['geojson']={'type':'FeatureCollection','features':[]};newgeojson['fillPaint']=fillPaint;var geojsonList=[];geojsonList.push(newgeojson);var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);// initialize our state\nfunction App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.state={data:[],id:0,message:null,intervalIsSet:false,idToDelete:null,idToUpdate:null,objectToUpdate:null,selectedDay:dateSelection,geojson:geojsonList,lng:5,lat:34,zoom:2,hoveredState:'Hover over a state',hoveredStateCases:null,hoveredStateDeaths:null};_this.setDate=function(newDate){var date=newDate||new Date();_this.setState({selectedDay:date.getFullYear()+\"-\"+(date.getMonth()+1)+\"-\"+date.getDate()});};_this.getPreviousDate=function(){var selectedDay=_this.state.selectedDay;var currentDayInMilli=new Date(selectedDay).getTime();var oneDay=1000*60*60*24;var previousDayInMilli=currentDayInMilli-oneDay;var previousDate=new Date(previousDayInMilli);_this.handleDayChange(previousDate);};_this.getNextDate=function(){var selectedDay=_this.state.selectedDay;var currentDayInMilli=new Date(selectedDay).getTime();var oneDay=1000*60*60*24;var nextDayInMilli=currentDayInMilli+oneDay;var nextDate=new Date(nextDayInMilli);_this.handleDayChange(nextDate);};_this.getDataFromDb=function(stateDataQuery,dateSelection){fetch(stateDataQuery+dateSelection).then(function(data){return data.json();}).then(function(res){return _this.setState({data:res.data});}).catch(function(err){return console.log(err);});};_this.getGeojson=function(geojsonQuery,dateSelection){fetch(geojsonQuery+dateSelection).then(function(data){console.log(data);data.json();}).then(function(res){_this.setState({geojson:res.geojson});console.log(res);}).catch(function(err){return console.log(err);});};_this.updateGeojson=function(geojsonQuery,dateSelection){fetch(geojsonQuery+dateSelection).then(function(data){return data.json();}).then(function(res){var geojson=_this.state.geojson;geojson.forEach(function(st){_this.map.setPaintProperty(st.geojson.features[0].properties.name,'fill-color',st.fillPaint['fill-color']);stateColors[st.geojson.features[0].properties.name]=st.fillPaint['fill-color'];});});};_this.handleDayChange=_this.handleDayChange.bind(_assertThisInitialized(_this));_this.colorLegend=React.createRef();return _this;}_createClass(App,[{key:\"formatDate\",value:function formatDate(date){var d=new Date(date),month=''+(d.getMonth()+1),day=''+d.getDate(),year=d.getFullYear();if(month.length<2)month='0'+month;if(day.length<2)day='0'+day;return[year,month,day].join('-');}},{key:\"handleDayChange\",value:function handleDayChange(day){var date=this.formatDate(day);// this.setState({ selectedDay: date });\nthis.setDate(day);this.getDataFromDb(stateDataQuery,date);this.getGeojson(geojsonQuery,date);this.updateGeojson(geojsonQuery,date);}},{key:\"getColor\",// color function\nvalue:function getColor(c){return c>10000?'#800026':c>5000?'#BD0026':c>1000?'#E31A1C':c>500?'#FC4E2A':c>100?'#FD8D3C':c>10?'#FEB24C':c>0?'#FED976':'#FFEDA0';}// hover state\n},{key:\"displayState\",value:function displayState(state){var _this2=this;if(state){var data=this.state.data;if(!data[0]){this.setState({hoveredState:state,hoveredStateCases:'No records for this date'});}else{var count=data.length;var set=false;data.forEach(function(st){if(state===st['state']){_this2.setState({hoveredState:st['state'],hoveredStateCases:'Cases: '+st['cases'],hoveredStateDeaths:'Deaths: '+st['deaths']});set=true;}count--;});if(count===0&&!set){this.setState({hoveredState:state,hoveredStateCases:'No records for this date',hoveredStateDeaths:null});}}}else{this.setState({hoveredState:'Hover over a state',hoveredStateCases:null,hoveredStateDeaths:null});}}// when component mounts, first thing it does is fetch all existing data in our db\n// then we incorporate a polling logic so that we can easily see if our db has\n// changed and implement those changes into our UI\n},{key:\"componentDidMount\",value:function componentDidMount(){var _this3=this;var date=this.formatDate(dateSelection);this.getDataFromDb(stateDataQuery,date);this.getGeojson(geojsonQuery,date);if(!this.state.intervalIsSet){var interval=setInterval(this.getDataFromDb(stateDataQuery,date),1000);this.setState({intervalIsSet:interval});}// load the color legend\nvar cl=this.colorLegend.current;var grades=[0,10,100,500,1000,5000,10000];cl.innerHTML+='<i style=\"background:'+this.getColor(0)+';width: 18px;height: 16px;position: absolute;float: left;margin-right: 8px;opacity: 0.7;\"></i> '+'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+'0'+'<br>';for(var i=0;i<grades.length;i++){cl.innerHTML+='<i style=\"background:'+this.getColor(grades[i]+1)+';width: 18px;height: 16px;position: absolute;float: left;margin-right: 8px;opacity: 0.7;\"></i> '+'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'+(grades[i]+1)+(grades[i+1]?'&ndash;'+grades[i+1]+'<br>':'+');}// mapbox init\nmapboxgl.accessToken=accessToken;this.map=new mapboxgl.Map({container:'map',// html element id in render\nstyle:'mapbox://styles/mapbox/dark-v10',center:[-97,39],// note: lon comes before lat\nzoom:[3],scrollZoom:false});// mapbox onload\nthis.map.on('load',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(geojsonQuery+dateSelection).then(function(){// const geojson = this.state.geojson;\n_this3.state.geojson.forEach(function(st){stateColors[st.geojson.features[0].properties.name]=st.fillPaint['fill-color'];_this3.map.addSource(st.geojson.features[0].id,{type:'geojson',data:st.geojson});_this3.map.addLayer({id:st.geojson.features[0].properties.name,type:'fill',source:st.geojson.features[0].id,paint:st.fillPaint});_this3.map.on('mouseenter',st.geojson.features[0].properties.name,function(){hoverCount++;if(hoverCount){_this3.map.getCanvas().style.cursor='pointer';}_this3.map.setPaintProperty(st.geojson.features[0].properties.name,'fill-opacity',0.5);_this3.map.setPaintProperty(st.geojson.features[0].properties.name,'fill-color','white');_this3.displayState(st.geojson.features[0].properties.name);});_this3.map.on('mouseleave',st.geojson.features[0].properties.name,function(){hoverCount--;if(hoverCount===0){_this3.map.getCanvas().style.cursor='';_this3.displayState(null);}_this3.map.setPaintProperty(st.geojson.features[0].properties.name,'fill-opacity',0.7);_this3.map.setPaintProperty(st.geojson.features[0].properties.name,'fill-color',stateColors[st.geojson.features[0].properties.name]);});});});case 2:case\"end\":return _context.stop();}}},_callee);})));}// never let a process live forever\n// always kill a process everytime we are done using it\n},{key:\"componentWillUnmount\",value:function componentWillUnmount(){if(this.state.intervalIsSet){clearInterval(this.state.intervalIsSet);this.setState({intervalIsSet:null});}}// our first get method that uses our backend api to\n// fetch data from our data base\n},{key:\"render\",value:function render(){var data=this.state.data;var selectedDay=this.state.selectedDay;var classes=useStyles;var hoveredState=this.state.hoveredState;var hoveredStateCases=this.state.hoveredStateCases;var hoveredStateDeaths=this.state.hoveredStateDeaths;return/*#__PURE__*/React.createElement(\"div\",{style:{justifyContent:'center'}},/*#__PURE__*/React.createElement(\"div\",{id:\"map\",style:{position:'block',top:0,bottom:0,width:'99vw',height:'75vh'}}),/*#__PURE__*/React.createElement(\"div\",{style:{lineHeight:'18px',textAlign:'left','color':'#555','padding':'6px 8px','font':'16px/18px Arial, Helvetica, sans-serif','background':'rgba(255,255,255,0.7)',boxShadow:'0 0 15px rgba(0,0,0,0.2)','position':'absolute',zIndex:'1 !important','top':'10%','left':'2%',whiteSpace:'normal'}},/*#__PURE__*/React.createElement(\"b\",null,hoveredState),hoveredStateCases?/*#__PURE__*/React.createElement(\"div\",{style:{'font':'14px/16px Arial, Helvetica, sans-serif'}},/*#__PURE__*/React.createElement(\"em\",null,hoveredStateCases)):null,hoveredStateDeaths?/*#__PURE__*/React.createElement(\"div\",{style:{'font':'14px/16px Arial, Helvetica, sans-serif'}},/*#__PURE__*/React.createElement(\"em\",null,hoveredStateDeaths)):null),/*#__PURE__*/React.createElement(\"div\",{ref:this.colorLegend,style:{lineHeight:'18px',textAlign:'left','color':'#555','padding':'6px 8px','font':'14px/16px Arial, Helvetica, sans-serif','background':'rgba(255,255,255,0.7)',boxShadow:'0 0 15px rgba(0,0,0,0.2)','position':'absolute',zIndex:'1 !important','top':'50%','left':'2%',whiteSpace:'normal'}},/*#__PURE__*/React.createElement(\"b\",null,\"Number of Cases\"),/*#__PURE__*/React.createElement(\"br\",null)),/*#__PURE__*/React.createElement(\"p\",{style:{'font':'16px/18px Arial, Helvetica, sans-serif'}},\"Day: \",selectedDay),/*#__PURE__*/React.createElement(DayPickerInput,{onDayChange:this.handleDayChange,selectedDay:selectedDay,value:selectedDay,style:{'font':'14px/16px Arial, Helvetica, sans-serif'}}),/*#__PURE__*/React.createElement(Button,{onClick:this.getPreviousDate},\"Previous\"),/*#__PURE__*/React.createElement(Button,{onClick:this.getNextDate},\"Next\"),/*#__PURE__*/React.createElement(TableContainer,{component:Paper},/*#__PURE__*/React.createElement(Table,{className:classes.table,\"aria-label\":\"simple table\"},/*#__PURE__*/React.createElement(TableHead,null,/*#__PURE__*/React.createElement(TableRow,null,/*#__PURE__*/React.createElement(TableCell,null,\"State\"),/*#__PURE__*/React.createElement(TableCell,{align:\"right\"},\"Cases\"),/*#__PURE__*/React.createElement(TableCell,{align:\"right\"},\"Deaths\"))),/*#__PURE__*/React.createElement(TableBody,null,data.length<=0?/*#__PURE__*/React.createElement(TableRow,{key:1},/*#__PURE__*/React.createElement(TableCell,{component:\"th\",scope:\"row\"},\"There are no records for this date\")):data.map(function(dat,index){return/*#__PURE__*/React.createElement(TableRow,{key:index},/*#__PURE__*/React.createElement(TableCell,{component:\"th\",scope:\"row\"},dat.state),/*#__PURE__*/React.createElement(TableCell,{align:\"right\"},dat.cases),/*#__PURE__*/React.createElement(TableCell,{align:\"right\"},dat.deaths));})))));}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/sevi/Desktop/corona/client/src/App.js"],"names":["React","Component","axios","mapboxgl","DayPickerInput","makeStyles","Button","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","accessToken","stateColors","hoverCount","linePaint","fillPaint","stateDataQuery","geojsonQuery","dateSelection","useStyles","table","minWidth","newgeojson","geojsonList","push","App","props","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","selectedDay","geojson","lng","lat","zoom","hoveredState","hoveredStateCases","hoveredStateDeaths","setDate","newDate","date","Date","setState","getFullYear","getMonth","getDate","getPreviousDate","currentDayInMilli","getTime","oneDay","previousDayInMilli","previousDate","handleDayChange","getNextDate","nextDayInMilli","nextDate","getDataFromDb","fetch","then","json","res","catch","err","console","log","getGeojson","updateGeojson","forEach","st","map","setPaintProperty","features","properties","name","bind","colorLegend","createRef","d","month","day","year","length","join","formatDate","c","count","set","interval","setInterval","cl","current","grades","innerHTML","getColor","i","Map","container","style","center","scrollZoom","on","addSource","type","addLayer","source","paint","getCanvas","cursor","displayState","clearInterval","classes","justifyContent","position","top","bottom","width","height","lineHeight","textAlign","boxShadow","zIndex","whiteSpace","dat","index","cases","deaths"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\nimport axios from 'axios';\n// Mapbox\n// import ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\n// import * as MapboxGL from 'mapbox-gl';\nimport mapboxgl from 'mapbox-gl';\n// DayPicker\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n// Material UI\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n// map init\nconst accessToken = 'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ';\nvar stateColors = {};\nvar hoverCount = 0;\n\n// map styles\nconst linePaint: MapboxGL.LinePaint = {\n  'line-color': 'white',\n  'line-width': 2,\n};\nconst fillPaint: MapboxGL.fillPaint = {\n  \"fill-color\": \"white\",\n  \"fill-opacity\": 0.7,\n}\n\n// api calls\nconst stateDataQuery = '/api/getStateData?date=';\nconst geojsonQuery = '/api/getGeojsonData?date=';\nvar dateSelection = '2020-1-20';\n\n// table styles\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 400,\n  },\n});\n\nvar newgeojson = {}\nnewgeojson['geojson'] = {'type': 'FeatureCollection', 'features': []};\nnewgeojson['fillPaint'] = fillPaint;\n\nvar geojsonList = [];\ngeojsonList.push(newgeojson);\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n    selectedDay: dateSelection,\n    geojson: geojsonList,\n    lng: 5,\n    lat: 34,\n    zoom: 2,\n    hoveredState: 'Hover over a state',\n    hoveredStateCases: null,\n    hoveredStateDeaths: null,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.colorLegend = React.createRef();\n  }\n  \n  formatDate(date) {\n      var d = new Date(date),\n          month = '' + (d.getMonth() + 1),\n          day = '' + d.getDate(),\n          year = d.getFullYear();\n\n      if (month.length < 2) \n          month = '0' + month;\n      if (day.length < 2) \n          day = '0' + day;\n\n      return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    const date = this.formatDate(day);\n    // this.setState({ selectedDay: date });\n    this.setDate(day);\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n    this.updateGeojson(geojsonQuery, date);\n  }\n\n  setDate = (newDate) => {\n    const date = newDate || new Date();\n    this.setState({\n      selectedDay:\n        date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n    });\n  };\n\n  getPreviousDate = () => {\n    const { selectedDay } = this.state\n\n    const currentDayInMilli = new Date(selectedDay).getTime()\n    const oneDay = 1000 * 60 *60 *24\n    const previousDayInMilli = currentDayInMilli - oneDay\n    const previousDate = new Date(previousDayInMilli)\n\n    this.handleDayChange(previousDate);\n  }\n\n  getNextDate = () => {\n    const { selectedDay } = this.state\n\n    const currentDayInMilli = new Date(selectedDay).getTime()\n    const oneDay = 1000 * 60 *60 *24\n    const nextDayInMilli = currentDayInMilli + oneDay\n    const nextDate = new Date(nextDayInMilli)\n\n    this.handleDayChange(nextDate);\n  }\n\n  // color function\n  getColor(c) {\n    return c > 10000 ? '#800026' :\n           c > 5000  ? '#BD0026' :\n           c > 1000  ? '#E31A1C' :\n           c > 500   ? '#FC4E2A' :\n           c > 100   ? '#FD8D3C' :\n           c > 10    ? '#FEB24C' :\n           c > 0     ? '#FED976' :\n                       '#FFEDA0';\n  }\n\n  // hover state\n  displayState(state) {\n    if (state) {\n      const { data } = this.state;   \n      if (!data[0]) {\n        this.setState({\n          hoveredState: state,\n          hoveredStateCases: 'No records for this date',\n        });   \n      } else {\n        var count = data.length;\n        var set = false;\n        data.forEach(st => {\n          if (state === st['state']) {\n            this.setState({\n              hoveredState: st['state'],\n              hoveredStateCases: 'Cases: ' + st['cases'],\n              hoveredStateDeaths: 'Deaths: ' + st['deaths'],\n            })\n            set = true;\n          }\n          count--;\n        });\n        if (count === 0 && !set) {\n          this.setState({\n            hoveredState: state,\n            hoveredStateCases: 'No records for this date',\n            hoveredStateDeaths: null,\n          });            \n        }\n      }\n    } else {\n      this.setState({ \n        hoveredState: 'Hover over a state', \n        hoveredStateCases: null, \n        hoveredStateDeaths: null, \n      });\n    }\n\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    const date = this.formatDate(dateSelection);\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, date), 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n\n    // load the color legend\n    const cl = this.colorLegend.current;\n    var grades = [0, 10, 100, 500, 1000, 5000, 10000];\n    cl.innerHTML += '<i style=\"background:' + this.getColor(0) + \n    ';width: 18px;height: 16px;position: absolute;float: left;margin-right: 8px;opacity: 0.7;\"></i> ' \n    + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + '0' + '<br>';    \n    for (var i = 0; i < grades.length; i++) {\n      cl.innerHTML += '<i style=\"background:' + this.getColor(grades[i] + 1) + \n      ';width: 18px;height: 16px;position: absolute;float: left;margin-right: 8px;opacity: 0.7;\"></i> ' \n      + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + (grades[i]+1) + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');\n    }\n\n    // mapbox init\n    mapboxgl.accessToken = accessToken;\n    this.map = new mapboxgl.Map({\n      container: 'map', // html element id in render\n      style: 'mapbox://styles/mapbox/dark-v10',\n      center: [-97,39], // note: lon comes before lat\n      zoom: [3],\n      scrollZoom: false,\n    });\n\n    // mapbox onload\n    this.map.on('load', async() => {\n      await fetch(geojsonQuery + dateSelection).then(() => {\n        // const geojson = this.state.geojson;\n        this.state.geojson.forEach(st => {\n          stateColors[st.geojson.features[0].properties.name] = st.fillPaint['fill-color'];\n          this.map.addSource(st.geojson.features[0].id, {\n            type: 'geojson',\n            data: st.geojson,\n          });\n\n          this.map.addLayer({\n            id: st.geojson.features[0].properties.name,\n            type: 'fill',\n            source: st.geojson.features[0].id,\n            paint: st.fillPaint,\n          });\n\n          this.map.on('mouseenter', st.geojson.features[0].properties.name, () => {\n            hoverCount++\n            if (hoverCount) {\n              this.map.getCanvas().style.cursor = 'pointer';\n            }\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-opacity', 0.5);\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', 'white');\n            this.displayState(st.geojson.features[0].properties.name);\n          });\n\n          this.map.on('mouseleave', st.geojson.features[0].properties.name, () => {\n            hoverCount--;\n            if (hoverCount === 0) {\n              this.map.getCanvas().style.cursor = '';\n              this.displayState(null);\n            }\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-opacity', 0.7);\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', stateColors[st.geojson.features[0].properties.name]);\n          });\n        });\n      });\n    });\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = (stateDataQuery, dateSelection) => {\n    fetch(stateDataQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data}))\n      .catch((err) => console.log(err));\n  };\n\n  // supply the states geojson data\n  getGeojson = (geojsonQuery, dateSelection) => {\n    fetch(geojsonQuery + dateSelection)\n      .then((data) => {\n        console.log(data);\n        data.json();\n      })\n      .then((res) => {\n        this.setState({ geojson: res.geojson });\n        console.log(res);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  updateGeojson = (geojsonQuery, dateSelection) => {\n    fetch(geojsonQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => {\n        const geojson = this.state.geojson;\n        geojson.forEach(st => {\n          this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', st.fillPaint['fill-color']);\n          stateColors[st.geojson.features[0].properties.name] = st.fillPaint['fill-color'];\n        });\n      });    \n  };\n\n  render() {\n\n    const { data } = this.state;\n    const { selectedDay } = this.state;\n    const classes = useStyles;\n    const { hoveredState } = this.state;\n    const { hoveredStateCases } = this.state;\n    const { hoveredStateDeaths } = this.state;\n\n    return (\n      <div \n        style={{justifyContent: 'center'}} \n      >\n        <div id='map' style={{\n          position: 'block',\n          top: 0,\n          bottom: 0,\n          width: '99vw',\n          height: '75vh',\n        }}/>\n        <div style={{\n          lineHeight: '18px',\n          textAlign: 'left',\n          'color': '#555',\n          'padding': '6px 8px',\n          'font': '16px/18px Arial, Helvetica, sans-serif',\n          'background': 'rgba(255,255,255,0.7)',\n          boxShadow: '0 0 15px rgba(0,0,0,0.2)',\n          'position': 'absolute',\n          zIndex: '1 !important',\n          'top': '10%',\n          'left': '2%',\n          whiteSpace: 'normal',          \n        }}><b>{ hoveredState }</b>\n          { hoveredStateCases ? <div style={{'font': '14px/16px Arial, Helvetica, sans-serif'}}><em>{ hoveredStateCases }</em></div> : null}\n          { hoveredStateDeaths ? <div style={{'font': '14px/16px Arial, Helvetica, sans-serif'}}><em>{ hoveredStateDeaths }</em></div> : null}\n        </div>\n        <div ref={this.colorLegend} style={{\n          lineHeight: '18px',\n          textAlign: 'left',\n          'color': '#555',\n          'padding': '6px 8px',\n          'font': '14px/16px Arial, Helvetica, sans-serif',\n          'background': 'rgba(255,255,255,0.7)',\n          boxShadow: '0 0 15px rgba(0,0,0,0.2)',\n          'position': 'absolute',\n          zIndex: '1 !important',\n          'top': '50%',\n          'left': '2%',\n          whiteSpace: 'normal',\n        }}><b>Number of Cases</b><br/></div>\n        <p style={{\n          'font':'16px/18px Arial, Helvetica, sans-serif',\n        }}>Day: { selectedDay }</p>\n        <DayPickerInput \n          onDayChange={this.handleDayChange} \n          selectedDay={ selectedDay }\n          value={ selectedDay }\n          style={{\n          'font':'14px/16px Arial, Helvetica, sans-serif',\n        }}/>\n        <Button onClick={this.getPreviousDate}>Previous</Button>\n        <Button onClick={this.getNextDate}>Next</Button>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>State</TableCell>\n                <TableCell align=\"right\">Cases</TableCell>\n                <TableCell align=\"right\">Deaths</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.length <= 0\n              ? (<TableRow key={1}><TableCell component=\"th\" scope=\"row\">There are no records for this date</TableCell></TableRow>)\n              : data.map((dat, index) => (\n                <TableRow key={index}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {dat.state}\n                  </TableCell>\n                  <TableCell align=\"right\">{dat.cases}</TableCell>\n                  <TableCell align=\"right\">{dat.deaths}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}