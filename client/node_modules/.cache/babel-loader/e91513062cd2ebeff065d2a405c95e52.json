{"ast":null,"code":"var _jsxFileName = \"/Users/sevi/Desktop/corona/client/src/App.js\";\nimport React, { Component } from 'react'; // import ReactDOM from 'react-dom';\n\nimport axios from 'axios'; // Mapbox\n\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl'; // import * as MapboxGL from 'mapbox-gl';\n\nimport mapboxgl from 'mapbox-gl'; // DayPicker\n\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css'; // Prereqs for Enhanced Table\n\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx'; // Material UI\n\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch'; // import FilterListIcon from '@material-ui/icons/FilterList';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// map init\n\nconst accessToken = 'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ';\nvar stateColors = {};\nvar hoverCount = 0; // map styles\n\nconst linePaint = {\n  'line-color': 'white',\n  'line-width': 2\n};\nconst fillPaint = {\n  \"fill-color\": \"white\",\n  \"fill-opacity\": 0.7\n}; // api calls\n\nconst stateDataQuery = '/api/getStateData?date=';\nconst geojsonQuery = '/api/getGeojsonData?date=';\nvar dateSelection = '2020-1-20'; // init geojson\n\nvar newgeojson = {};\nnewgeojson['geojson'] = {\n  'type': 'FeatureCollection',\n  'features': []\n};\nnewgeojson['fillPaint'] = fillPaint;\nvar geojsonList = [];\ngeojsonList.push(newgeojson); // comparators for table sorting\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [{\n  id: 'name',\n  numeric: false,\n  disablePadding: true,\n  label: 'State'\n}, {\n  id: 'cases',\n  numeric: true,\n  disablePadding: false,\n  label: 'Cases'\n}, {\n  id: 'deaths',\n  numeric: true,\n  disablePadding: false,\n  label: 'Deaths'\n}];\n\nfunction EnhancedTableHead(props) {\n  const {\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected,\n    rowCount,\n    onRequestSort\n  } = props;\n\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    padding: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    indeterminate: numSelected > 0 && numSelected < rowCount,\n    checked: rowCount > 0 && numSelected === rowCount,\n    onChange: onSelectAllClick,\n    inputProps: {\n      'aria-label': 'select all desserts'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  })), headCells.map(headCell => /*#__PURE__*/React.createElement(TableCell, {\n    key: headCell.id,\n    align: headCell.numeric ? 'right' : 'left',\n    padding: headCell.disablePadding ? 'none' : 'default',\n    sortDirection: orderBy === headCell.id ? order : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableSortLabel, {\n    active: orderBy === headCell.id,\n    direction: orderBy === headCell.id ? order : 'asc',\n    onClick: createSortHandler(headCell.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, headCell.label, orderBy === headCell.id ? /*#__PURE__*/React.createElement(\"span\", {\n    className: classes.visuallyHidden,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, order === 'desc' ? 'sorted descending' : 'sorted ascending') : null)))));\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired\n};\nconst useToolbarStyles = makeStyles(theme => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1)\n  },\n  highlight: theme.palette.type === 'light' ? {\n    color: theme.palette.secondary.main,\n    backgroundColor: lighten(theme.palette.secondary.light, 0.85)\n  } : {\n    color: theme.palette.text.primary,\n    backgroundColor: theme.palette.secondary.dark\n  },\n  title: {\n    flex: '1 1 100%'\n  }\n}));\n\nconst EnhancedTableToolbar = props => {\n  const classes = useToolbarStyles();\n  const {\n    numSelected\n  } = props;\n  return /*#__PURE__*/React.createElement(Toolbar, {\n    className: clsx(classes.root, {\n      [classes.highlight]: numSelected > 0\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, numSelected > 0 ? /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    color: \"inherit\",\n    variant: \"subtitle1\",\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, numSelected, \" selected\") : /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    variant: \"h6\",\n    id: \"tableTitle\",\n    component: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, \"Nutrition\"));\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired\n};\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  table: {\n    minWidth: 750\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1\n  }\n});\n\nclass App extends Component {\n  // initialize our state\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null,\n      selectedDay: dateSelection,\n      geojson: geojsonList,\n      lng: 5,\n      lat: 34,\n      zoom: 2\n    };\n\n    this.setDate = newDate => {\n      const date = newDate || new Date();\n      this.setState({\n        selectedDay: date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n      });\n    };\n\n    this.getPreviousDate = () => {\n      const {\n        selectedDay\n      } = this.state;\n      const currentDayInMilli = new Date(selectedDay).getTime();\n      const oneDay = 1000 * 60 * 60 * 24;\n      const previousDayInMilli = currentDayInMilli - oneDay;\n      const previousDate = new Date(previousDayInMilli);\n      this.handleDayChange(previousDate);\n    };\n\n    this.getNextDate = () => {\n      const {\n        selectedDay\n      } = this.state;\n      const currentDayInMilli = new Date(selectedDay).getTime();\n      const oneDay = 1000 * 60 * 60 * 24;\n      const nextDayInMilli = currentDayInMilli + oneDay;\n      const nextDate = new Date(nextDayInMilli);\n      this.handleDayChange(nextDate);\n    };\n\n    this.getDataFromDb = (stateDataQuery, dateSelection) => {\n      fetch(stateDataQuery + dateSelection).then(data => data.json()).then(res => this.setState({\n        data: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getGeojson = (geojsonQuery, dateSelection) => {\n      fetch(geojsonQuery + dateSelection).then(data => data.json()).then(res => this.setState({\n        geojson: res.geojson\n      })).catch(err => console.log(err));\n    };\n\n    this.updateGeojson = () => {\n      fetch(geojsonQuery + dateSelection).then(data => data.json()).then(res => {\n        const geojson = this.state.geojson;\n        geojson.forEach(st => {\n          this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', st.fillPaint['fill-color']);\n          stateColors[st.geojson.features[0].properties.name] = st.fillPaint['fill-color'];\n        });\n      });\n    };\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.colorLegend = React.createRef();\n  }\n\n  formatDate(date) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    const date = this.formatDate(day); // this.setState({ selectedDay: date });\n\n    this.setDate(day);\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n    this.updateGeojson();\n  }\n\n  // color function\n  getColor(c) {\n    return c > 10000 ? '#800026' : c > 5000 ? '#BD0026' : c > 1000 ? '#E31A1C' : c > 500 ? '#FC4E2A' : c > 100 ? '#FD8D3C' : c > 10 ? '#FEB24C' : c > 0 ? '#FED976' : '#FFEDA0';\n  } // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n\n\n  componentDidMount() {\n    const date = this.formatDate(dateSelection);\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, date), 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    } // load the color legend\n\n\n    const cl = this.colorLegend.current;\n    var grades = [0, 10, 100, 500, 1000, 5000, 10000];\n    cl.innerHTML += '<i style=\"background:' + this.getColor(0) + ';width: 18px;height: 16px;position: absolute;float: left;margin-right: 8px;opacity: 0.7;\"></i> ' + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + '0' + '<br>';\n\n    for (var i = 0; i < grades.length; i++) {\n      console.log(this.getColor(grades[i] + 1));\n      cl.innerHTML += '<i style=\"background:' + this.getColor(grades[i] + 1) + ';width: 18px;height: 16px;position: absolute;float: left;margin-right: 8px;opacity: 0.7;\"></i> ' + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + (grades[i] + 1) + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');\n    } // mapbox init\n\n\n    mapboxgl.accessToken = accessToken;\n    this.map = new mapboxgl.Map({\n      container: 'map',\n      // html element id in render\n      style: 'mapbox://styles/mapbox/dark-v10',\n      center: [-97, 39],\n      // note: lon comes before lat\n      zoom: [3],\n      scrollZoom: false\n    }); // mapbox onload\n\n    this.map.on('load', async () => {\n      var prevColor = '';\n      await fetch(geojsonQuery + dateSelection).then(() => {\n        // const geojson = this.state.geojson;\n        this.state.geojson.forEach(st => {\n          stateColors[st.geojson.features[0].properties.name] = st.fillPaint['fill-color'];\n          this.map.addSource(st.geojson.features[0].id, {\n            type: 'geojson',\n            data: st.geojson\n          });\n          this.map.addLayer({\n            id: st.geojson.features[0].properties.name,\n            type: 'fill',\n            source: st.geojson.features[0].id,\n            paint: st.fillPaint\n          });\n          this.map.on('mouseenter', st.geojson.features[0].properties.name, () => {\n            hoverCount++;\n\n            if (hoverCount) {\n              this.map.getCanvas().style.cursor = 'pointer';\n            }\n\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-opacity', 0.5);\n            prevColor = this.map.getLayer(st.geojson.features[0].properties.name);\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', 'white');\n          });\n          this.map.on('mouseleave', st.geojson.features[0].properties.name, () => {\n            hoverCount--;\n\n            if (hoverCount == 0) {\n              this.map.getCanvas().style.cursor = '';\n            }\n\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-opacity', 0.7);\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', stateColors[st.geojson.features[0].properties.name]);\n          });\n        });\n      });\n    });\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  render() {\n    const {\n      data\n    } = this.state;\n    const {\n      selectedDay\n    } = this.state; // const classes = useStyles;\n    // table variables\n\n    const classes = useStyles;\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('cases');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n    const handleRequestSort = (event, property) => {\n      const isAsc = orderBy === property && order === 'asc';\n      setOrder(isAsc ? 'desc' : 'asc');\n      setOrderBy(property);\n    };\n\n    const handleSelectAllClick = event => {\n      if (event.target.checked) {\n        const newSelecteds = data.map(n => n.name);\n        setSelected(newSelecteds);\n        return;\n      }\n\n      setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n      const selectedIndex = selected.indexOf(name);\n      let newSelected = [];\n\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n      }\n\n      setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n      setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = event => {\n      setRowsPerPage(parseInt(event.target.value, 10));\n      setPage(0);\n    };\n\n    const handleChangeDense = event => {\n      setDense(event.target.checked);\n    };\n\n    const isSelected = name => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"map\",\n      style: {\n        position: 'block',\n        top: 0,\n        bottom: 0,\n        width: '99vw',\n        height: '75vh'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.colorLegend,\n      style: {\n        'line-height': '18px',\n        'text-align': 'left',\n        'color': '#555',\n        'padding': '6px 8px',\n        'font': '14px/16px Arial, Helvetica, sans-serif',\n        'background': 'white',\n        'background': 'rgba(255,255,255,0.7)',\n        'box-shadow': '0 0 15px rgba(0,0,0,0.2)',\n        'position': 'absolute',\n        'z-index': '1 !important',\n        'top': '45%',\n        'left': '2%',\n        'white-space': 'normal'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 12\n      }\n    }, \"Number of Cases\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 34\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        'font': '16px/18px Arial, Helvetica, sans-serif'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }\n    }, \"Day: \", selectedDay), /*#__PURE__*/React.createElement(DayPickerInput, {\n      onDayChange: this.handleDayChange,\n      selectedDay: selectedDay,\n      value: selectedDay,\n      style: {\n        'font': '14px/16px Arial, Helvetica, sans-serif'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.getPreviousDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }\n    }, \"Previous\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.getNextDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }\n    }, \"Next\"), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      className: classes.table,\n      \"aria-label\": \"simple table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 17\n      }\n    }, \"State\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 17\n      }\n    }, \"Cases\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 17\n      }\n    }, \"Deaths\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 13\n      }\n    }, data.length <= 0 ? /*#__PURE__*/React.createElement(TableRow, {\n      key: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 36\n      }\n    }, \"There are no records for this date\")) : data.map((dat, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 19\n      }\n    }, dat.state), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 19\n      }\n    }, dat.cases), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 19\n      }\n    }, dat.deaths)))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sevi/Desktop/corona/client/src/App.js"],"names":["React","Component","axios","ReactMapboxGl","Layer","Feature","GeoJSONLayer","mapboxgl","DayPickerInput","PropTypes","clsx","lighten","makeStyles","Button","Table","TableBody","TableCell","TableContainer","TablePagination","TableHead","TableRow","TableSortLabel","Paper","Toolbar","Typography","Checkbox","IconButton","Tooltip","FormControlLabel","Switch","accessToken","stateColors","hoverCount","linePaint","fillPaint","stateDataQuery","geojsonQuery","dateSelection","newgeojson","geojsonList","push","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","headCells","id","numeric","disablePadding","label","EnhancedTableHead","props","classes","onSelectAllClick","numSelected","rowCount","onRequestSort","createSortHandler","property","event","headCell","visuallyHidden","propTypes","object","isRequired","number","func","oneOf","string","useToolbarStyles","theme","root","paddingLeft","spacing","paddingRight","highlight","palette","type","color","secondary","main","backgroundColor","light","text","primary","dark","title","flex","EnhancedTableToolbar","useStyles","width","table","minWidth","border","clip","height","margin","overflow","padding","position","top","App","constructor","state","data","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","selectedDay","geojson","lng","lat","zoom","setDate","newDate","date","Date","setState","getFullYear","getMonth","getDate","getPreviousDate","currentDayInMilli","getTime","oneDay","previousDayInMilli","previousDate","handleDayChange","getNextDate","nextDayInMilli","nextDate","getDataFromDb","fetch","then","json","res","catch","err","console","log","getGeojson","updateGeojson","forEach","st","setPaintProperty","features","properties","name","bind","colorLegend","createRef","formatDate","d","month","day","year","length","join","getColor","c","componentDidMount","interval","setInterval","cl","current","grades","innerHTML","i","Map","container","style","center","scrollZoom","on","prevColor","addSource","addLayer","source","paint","getCanvas","cursor","getLayer","componentWillUnmount","clearInterval","render","setOrder","useState","setOrderBy","selected","setSelected","page","setPage","dense","setDense","rowsPerPage","setRowsPerPage","handleRequestSort","isAsc","handleSelectAllClick","target","checked","newSelecteds","n","handleClick","selectedIndex","indexOf","newSelected","concat","slice","handleChangePage","newPage","handleChangeRowsPerPage","parseInt","value","handleChangeDense","isSelected","emptyRows","Math","min","justifyContent","bottom","dat","cases","deaths"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\nimport axios from 'axios';\n// Mapbox\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\n// import * as MapboxGL from 'mapbox-gl';\nimport mapboxgl from 'mapbox-gl';\n// DayPicker\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n// Prereqs for Enhanced Table\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\n// Material UI\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n// import FilterListIcon from '@material-ui/icons/FilterList';\n// import DeleteIcon from '@material-ui/icons/Delete';\n// map init\nconst accessToken = 'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ';\nvar stateColors = {};\nvar hoverCount = 0;\n\n// map styles\nconst linePaint: MapboxGL.LinePaint = {\n  'line-color': 'white',\n  'line-width': 2,\n};\nconst fillPaint: MapboxGL.fillPaint = {\n  \"fill-color\": \"white\",\n  \"fill-opacity\": 0.7,\n}\n\n// api calls\nconst stateDataQuery = '/api/getStateData?date=';\nconst geojsonQuery = '/api/getGeojsonData?date=';\nvar dateSelection = '2020-1-20';\n\n// init geojson\nvar newgeojson = {}\nnewgeojson['geojson'] = {'type': 'FeatureCollection', 'features': []};\nnewgeojson['fillPaint'] = fillPaint;\n\nvar geojsonList = [];\ngeojsonList.push(newgeojson);\n\n// comparators for table sorting\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n  \nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: 'State' },\n  { id: 'cases', numeric: true, disablePadding: false, label: 'Cases' },\n  { id: 'deaths', numeric: true, disablePadding: false, label: 'Deaths' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected } = props;\n\n  return (\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Nutrition\n        </Typography>\n      )}\n\n    </Toolbar>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n});\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n    selectedDay: dateSelection,\n    geojson: geojsonList,\n    lng: 5,\n    lat: 34,\n    zoom: 2,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.colorLegend = React.createRef();\n  }\n  \n  formatDate(date) {\n      var d = new Date(date),\n          month = '' + (d.getMonth() + 1),\n          day = '' + d.getDate(),\n          year = d.getFullYear();\n\n      if (month.length < 2) \n          month = '0' + month;\n      if (day.length < 2) \n          day = '0' + day;\n\n      return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    const date = this.formatDate(day);\n    // this.setState({ selectedDay: date });\n    this.setDate(day);\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n    this.updateGeojson();\n  }\n\n  setDate = (newDate) => {\n    const date = newDate || new Date();\n    this.setState({\n      selectedDay:\n        date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n    });\n  };\n\n  getPreviousDate = () => {\n    const { selectedDay } = this.state\n\n    const currentDayInMilli = new Date(selectedDay).getTime()\n    const oneDay = 1000 * 60 *60 *24\n    const previousDayInMilli = currentDayInMilli - oneDay\n    const previousDate = new Date(previousDayInMilli)\n\n    this.handleDayChange(previousDate);\n  }\n\n  getNextDate = () => {\n    const { selectedDay } = this.state\n\n    const currentDayInMilli = new Date(selectedDay).getTime()\n    const oneDay = 1000 * 60 *60 *24\n    const nextDayInMilli = currentDayInMilli + oneDay\n    const nextDate = new Date(nextDayInMilli)\n\n    this.handleDayChange(nextDate);\n  }\n\n  // color function\n  getColor(c) {\n    return c > 10000 ? '#800026' :\n           c > 5000  ? '#BD0026' :\n           c > 1000  ? '#E31A1C' :\n           c > 500   ? '#FC4E2A' :\n           c > 100   ? '#FD8D3C' :\n           c > 10    ? '#FEB24C' :\n           c > 0     ? '#FED976' :\n                       '#FFEDA0';\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    const date = this.formatDate(dateSelection);\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, date), 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n\n    // load the color legend\n    const cl = this.colorLegend.current;\n    var grades = [0, 10, 100, 500, 1000, 5000, 10000];\n    cl.innerHTML += '<i style=\"background:' + this.getColor(0) + \n    ';width: 18px;height: 16px;position: absolute;float: left;margin-right: 8px;opacity: 0.7;\"></i> ' \n    + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + '0' + '<br>';    \n    for (var i = 0; i < grades.length; i++) {\n      console.log(this.getColor(grades[i] + 1));\n      cl.innerHTML += '<i style=\"background:' + this.getColor(grades[i] + 1) + \n      ';width: 18px;height: 16px;position: absolute;float: left;margin-right: 8px;opacity: 0.7;\"></i> ' \n      + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + (grades[i]+1) + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');\n    }\n\n    // mapbox init\n    mapboxgl.accessToken = accessToken;\n    this.map = new mapboxgl.Map({\n      container: 'map', // html element id in render\n      style: 'mapbox://styles/mapbox/dark-v10',\n      center: [-97,39], // note: lon comes before lat\n      zoom: [3],\n      scrollZoom: false,\n    });\n\n    // mapbox onload\n    this.map.on('load', async() => {\n      var prevColor = '';\n      await fetch(geojsonQuery + dateSelection).then(() => {\n        // const geojson = this.state.geojson;\n        this.state.geojson.forEach(st => {\n          stateColors[st.geojson.features[0].properties.name] = st.fillPaint['fill-color'];\n          this.map.addSource(st.geojson.features[0].id, {\n            type: 'geojson',\n            data: st.geojson,\n          });\n\n          this.map.addLayer({\n            id: st.geojson.features[0].properties.name,\n            type: 'fill',\n            source: st.geojson.features[0].id,\n            paint: st.fillPaint,\n          });\n\n          this.map.on('mouseenter', st.geojson.features[0].properties.name, () => {\n            hoverCount++\n            if (hoverCount) {\n              this.map.getCanvas().style.cursor = 'pointer';\n            }\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-opacity', 0.5);\n            prevColor = this.map.getLayer(st.geojson.features[0].properties.name);\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', 'white');\n          });\n\n          this.map.on('mouseleave', st.geojson.features[0].properties.name, () => {\n            hoverCount--;\n            if (hoverCount == 0) {\n              this.map.getCanvas().style.cursor = '';\n            }\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-opacity', 0.7);\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', stateColors[st.geojson.features[0].properties.name]);\n          });\n        });\n      });\n    });\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = (stateDataQuery, dateSelection) => {\n    fetch(stateDataQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data}))\n      .catch((err) => console.log(err));\n  };\n\n  // supply the states geojson data\n  getGeojson = (geojsonQuery, dateSelection) => {\n    fetch(geojsonQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ geojson: res.geojson }))\n      .catch((err) => console.log(err));\n  };\n\n  updateGeojson = () => {\n    fetch(geojsonQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => {\n        const geojson = this.state.geojson;\n        geojson.forEach(st => {\n          this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', st.fillPaint['fill-color']);\n          stateColors[st.geojson.features[0].properties.name] = st.fillPaint['fill-color'];\n        });\n      });    \n  };\n\n  render() {\n\n    const { data } = this.state;\n    const { selectedDay } = this.state;\n    // const classes = useStyles;\n    // table variables\n    const classes = useStyles;\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('cases');\n    const [selected, setSelected] = React.useState([]);\n    const [page, setPage] = React.useState(0);\n    const [dense, setDense] = React.useState(false);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const handleRequestSort = (event, property) => {\n      const isAsc = orderBy === property && order === 'asc';\n      setOrder(isAsc ? 'desc' : 'asc');\n      setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n      if (event.target.checked) {\n        const newSelecteds = data.map((n) => n.name);\n        setSelected(newSelecteds);\n        return;\n      }\n      setSelected([]);\n    };\n\n    const handleClick = (event, name) => {\n      const selectedIndex = selected.indexOf(name);\n      let newSelected = [];\n\n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(\n          selected.slice(0, selectedIndex),\n          selected.slice(selectedIndex + 1),\n        );\n      }\n\n      setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n      setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n      setRowsPerPage(parseInt(event.target.value, 10));\n      setPage(0);\n    };\n\n    const handleChangeDense = (event) => {\n      setDense(event.target.checked);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n\n    return (\n      <div \n        style={{justifyContent: 'center'}} \n      >\n        <div id='map' style={{\n          position: 'block',\n          top: 0,\n          bottom: 0,\n          width: '99vw',\n          height: '75vh',\n        }}/>\n        <div ref={this.colorLegend} style={{\n          'line-height': '18px',\n          'text-align': 'left',\n          'color': '#555',\n          'padding': '6px 8px',\n          'font': '14px/16px Arial, Helvetica, sans-serif',\n          'background': 'white',\n          'background': 'rgba(255,255,255,0.7)',\n          'box-shadow': '0 0 15px rgba(0,0,0,0.2)',\n          'position': 'absolute',\n          'z-index': '1 !important',\n          'top': '45%',\n          'left': '2%',\n          'white-space': 'normal',\n        }}><b>Number of Cases</b><br/></div>\n        <p style={{\n          'font':'16px/18px Arial, Helvetica, sans-serif',\n        }}>Day: { selectedDay }</p>\n        <DayPickerInput \n          onDayChange={this.handleDayChange} \n          selectedDay={ selectedDay }\n          value={ selectedDay }\n          style={{\n          'font':'14px/16px Arial, Helvetica, sans-serif',\n        }}/>\n        <Button onClick={this.getPreviousDate}>Previous</Button>\n        <Button onClick={this.getNextDate}>Next</Button>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>State</TableCell>\n                <TableCell align=\"right\">Cases</TableCell>\n                <TableCell align=\"right\">Deaths</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.length <= 0\n              ? (<TableRow key={1}><TableCell component=\"th\" scope=\"row\">There are no records for this date</TableCell></TableRow>)\n              : data.map((dat, index) => (\n                <TableRow key={index}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {dat.state}\n                  </TableCell>\n                  <TableCell align=\"right\">{dat.cases}</TableCell>\n                  <TableCell align=\"right\">{dat.deaths}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}