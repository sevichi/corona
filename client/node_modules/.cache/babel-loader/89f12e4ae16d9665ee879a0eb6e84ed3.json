{"ast":null,"code":"var _jsxFileName = \"/Users/sevi/Desktop/corona/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios'; // import './App.css';\n\nimport states from './us-states.js'; // ES6\n\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\nconst Map = ReactMapboxGl({\n  accessToken: 'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ'\n});\nvar stateData = states;\nconsole.log(stateData);\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch('/api/getStateData?date=2020-02-25').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      })).catch(err => console.log(err));\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  render() {\n    const {\n      data\n    } = this.state;\n    const {\n      geojson\n    } = stateData.json();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      style: \"mapbox://styles/mapbox/dark-v10\",\n      center: [-97, 39],\n      containerStyle: {\n        height: '50vh',\n        width: '50vw'\n      },\n      zoom: [3],\n      id: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Layer, {\n      type: \"symbol\",\n      id: \"marker\",\n      layout: {\n        'icon-image': 'harbor-15'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Feature, {\n      coordinates: [-0.13235092163085938, 51.518250335096376],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(GeoJSONLayer, {\n      data: {\n        geojson\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map((dat, index) => /*#__PURE__*/React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, \" State: \"), \" \", dat.state, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 79\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 19\n      }\n    }, \" Cases: \"), \" \", dat.cases, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 79\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }\n    }, \" Deaths: \"), \" \", dat.deaths))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sevi/Desktop/corona/client/src/App.js"],"names":["React","Component","axios","states","ReactMapboxGl","Layer","Feature","GeoJSONLayer","Map","accessToken","stateData","console","log","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","catch","err","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","geojson","height","width","length","map","dat","index","padding","color","cases","deaths"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n// import './App.css';\nimport states from './us-states.js';\n// ES6\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\n \nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ'\n});\n\nvar stateData = states;\nconsole.log(stateData);\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch('/api/getStateData?date=2020-02-25')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }))\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    const { data } = this.state;\n    const { geojson } = stateData.json();\n    return (\n      <div>\n        <Map\n          style=\"mapbox://styles/mapbox/dark-v10\"\n          center= {[-97,39]}          \n          containerStyle={{\n            height: '50vh',\n            width: '50vw'\n          }}\n          zoom={[3]}\n          id='map'\n        >\n          <Layer type=\"symbol\" id=\"marker\" layout={{ 'icon-image': 'harbor-15' }}>\n            <Feature coordinates={[-0.13235092163085938,51.518250335096376]} />\n          </Layer>\n          <GeoJSONLayer\n            data={{geojson}}\n            />\n        </Map>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat, index) => (\n                <li style={{ padding: '10px' }} key={index}>\n                  <span style={{ color: 'gray' }}> State: </span> {dat.state} <br/>\n                  <span style={{ color: 'gray' }}> Cases: </span> {dat.cases} <br/>\n                  <span style={{ color: 'gray' }}> Deaths: </span> {dat.deaths}\n                </li>\n              ))}\n        </ul>\n      </div>      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}