{"ast":null,"code":"var _jsxFileName = \"/Users/sevi/Desktop/corona/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios'; // Mapbox\n\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl'; // DayPicker\n\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\nconst Map = ReactMapboxGl({\n  accessToken: 'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ'\n});\nconst stateDataQuery = '/api/getStateData?date=';\nvar dateSelection = '2020-04-17';\n\nclass App extends Component {\n  // initialize our state\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null,\n      selectedDay: '2020-04-17',\n      geojson: {\n        'type': 'FeatureCollection',\n        'features': []\n      }\n    };\n\n    this.getDataFromDb = (stateDataQuery, dateSelection) => {\n      fetch(stateDataQuery + dateSelection).then(data => data.json()).then(res => this.setState({\n        data: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getGeojson = () => {\n      fetch('/api/getGeojsonData').then(data => data.json()).then(res => this.setState({\n        geojson: res.geojson\n      })).catch(err => console.log(err));\n    };\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n  }\n\n  formatDate(date) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    var date = this.formatDate(day);\n    this.setState({\n      selectedDay: date\n    });\n    this.getDataFromDb(stateDataQuery, date);\n    console.log(this.state.geojson);\n  } // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n\n\n  componentDidMount() {\n    this.getDataFromDb(stateDataQuery, dateSelection);\n    this.getGeojson();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, dateSelection), 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  render() {\n    const {\n      data\n    } = this.state;\n    const {\n      geojson\n    } = this.state;\n    const {\n      selectedDay\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      style: \"mapbox://styles/mapbox/dark-v10\",\n      center: [-97, 39],\n      containerStyle: {\n        height: '75vh',\n        width: '90vw'\n      },\n      zoom: [3],\n      id: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(GeoJSONLayer, {\n      data: geojson,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }), geojson[\"features\"].length <= 0 ? '' : geojson[\"features\"].forEach(ft => /*#__PURE__*/React.createElement(Layer, {\n      type: \"fill\",\n      id: ft[\"id\"],\n      paint: ft[\"style\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, \"Day: \", selectedDay), /*#__PURE__*/React.createElement(DayPickerInput, {\n      onDayChange: this.handleDayChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map((dat, index) => /*#__PURE__*/React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 19\n      }\n    }, \" State: \"), \" \", dat.state, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 79\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 19\n      }\n    }, \" Cases: \"), \" \", dat.cases, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 79\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 19\n      }\n    }, \" Deaths: \"), \" \", dat.deaths))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sevi/Desktop/corona/client/src/App.js"],"names":["React","Component","axios","ReactMapboxGl","Layer","Feature","GeoJSONLayer","DayPickerInput","Map","accessToken","stateDataQuery","dateSelection","App","constructor","props","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","selectedDay","geojson","getDataFromDb","fetch","then","json","res","setState","catch","err","console","log","getGeojson","handleDayChange","bind","formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","height","width","forEach","ft","map","dat","index","padding","color","cases","deaths"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n// Mapbox\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\n// DayPicker\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n \nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ'\n});\n\nconst stateDataQuery = '/api/getStateData?date=';\nvar dateSelection = '2020-04-17';\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n    selectedDay: '2020-04-17',\n    geojson: {'type': 'FeatureCollection', 'features': []},\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleDayChange = this.handleDayChange.bind(this);\n  }\n  \n  formatDate(date) {\n      var d = new Date(date),\n          month = '' + (d.getMonth() + 1),\n          day = '' + d.getDate(),\n          year = d.getFullYear();\n\n      if (month.length < 2) \n          month = '0' + month;\n      if (day.length < 2) \n          day = '0' + day;\n\n      return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    var date = this.formatDate(day);\n    this.setState({ selectedDay: date });\n    this.getDataFromDb(stateDataQuery, date);\n    console.log(this.state.geojson);\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb(stateDataQuery, dateSelection);\n    this.getGeojson();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, dateSelection), 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = (stateDataQuery, dateSelection) => {\n    fetch(stateDataQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }))\n      .catch((err) => console.log(err));\n  };\n\n  // supply the states geojson data\n  getGeojson = () => {\n    fetch('/api/getGeojsonData')\n      .then((data) => data.json())\n      .then((res) => this.setState({ geojson: res.geojson }))\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    const { data } = this.state;\n    const { geojson } = this.state;\n    const { selectedDay } = this.state;\n\n    return (\n      <div>\n        <Map\n          style=\"mapbox://styles/mapbox/dark-v10\"\n          center= {[-97,39]}          \n          containerStyle={{\n            height: '75vh',\n            width: '90vw'\n          }}\n          zoom={[3]}\n          id='map'\n        >\n\n          <GeoJSONLayer\n            data={geojson}\n          />\n          {geojson[\"features\"].length <= 0\n            ? ''\n            : geojson[\"features\"].forEach((ft) => (\n                <Layer type={\"fill\"} id={ft[\"id\"]} paint={ft[\"style\"]}/>\n              ))}\n        </Map>\n        <p>Day: { selectedDay }</p>\n        <DayPickerInput onDayChange={this.handleDayChange} />\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat, index) => (\n                <li style={{ padding: '10px' }} key={index}>\n                  <span style={{ color: 'gray' }}> State: </span> {dat.state} <br/>\n                  <span style={{ color: 'gray' }}> Cases: </span> {dat.cases} <br/>\n                  <span style={{ color: 'gray' }}> Deaths: </span> {dat.deaths}\n                </li>\n              ))}\n        </ul>\n      </div>      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}