{"ast":null,"code":"var _jsxFileName = \"/Users/sevi/Desktop/corona/client/src/App.js\";\nimport React, { Component } from 'react'; // import ReactDOM from 'react-dom';\n\nimport axios from 'axios'; // Mapbox\n\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\nimport * as MapboxGL from 'mapbox-gl'; // DayPicker\n\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css'; // CalendarDays\n\nimport CalendarDays from 'react-native-calendar-slider-carousel'; // Material UI\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper'; // map init\n\nconst Map = ReactMapboxGl({\n  accessToken: 'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ',\n  scrollZoom: false\n}); // map styles\n\nconst linePaint = {\n  'line-color': 'white',\n  'line-width': 2\n};\nconst fillPaint = {\n  \"fill-color\": \"white\",\n  \"fill-opacity\": 0.7\n}; // api calls\n\nconst stateDataQuery = '/api/getStateData?date=';\nconst geojsonQuery = '/api/getGeojsonData?date=';\nvar dateSelection = '2020-01-21'; // table styles\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 400\n  }\n});\nvar newgeojson = {};\nnewgeojson['geojson'] = {\n  'type': 'FeatureCollection',\n  'features': []\n};\nnewgeojson['fillPaint'] = fillPaint;\nvar geojsonList = [];\ngeojsonList.push(newgeojson);\n\nclass App extends Component {\n  // initialize our state\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null,\n      selectedDay: dateSelection,\n      geojson: geojsonList\n    };\n\n    this.changeSelectedDate = date => {\n      console.log(date); // \"2019-07-20\"\n\n      this.setState({\n        selectedDate: date\n      });\n    };\n\n    this.getDataFromDb = (stateDataQuery, dateSelection) => {\n      fetch(stateDataQuery + dateSelection).then(data => data.json()).then(res => this.setState({\n        data: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getGeojson = (geojsonQuery, dateSelection) => {\n      fetch(geojsonQuery + dateSelection).then(data => data.json()).then(res => this.setState({\n        geojson: res.geojson\n      })).catch(err => console.log(err));\n    };\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n  }\n\n  formatDate(date) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    var date = this.formatDate(day);\n    this.setState({\n      selectedDay: date\n    });\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb(stateDataQuery, dateSelection);\n    this.getGeojson(geojsonQuery, dateSelection);\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, dateSelection), 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // update geojson one by one\n  // updateGeojson = (geojsonQuery, dateSelection) => {\n  //   fetch(geojsonQuery + dateSelection)\n  //     .then((data) => data.json())\n  //     .then((res) => this.setState(state => {\n  //       const gList = \n  //     }))\n  // }\n  render() {\n    const {\n      data\n    } = this.state;\n    const geojson = this.state.geojson;\n    const {\n      selectedDay\n    } = this.state;\n    const classes = useStyles;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      style: \"mapbox://styles/mapbox/dark-v10\",\n      center: [-97, 39],\n      containerStyle: {\n        height: '75vh',\n        width: '99vw'\n      },\n      zoom: [3],\n      id: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }, geojson.length <= 0 ? 'NO GEOJSON' : geojson.map((gl, index) => /*#__PURE__*/React.createElement(GeoJSONLayer, {\n      key: index,\n      data: gl.geojson,\n      fillPaint: gl.fillPaint,\n      linePaint: linePaint,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, \"Day: \", selectedDay), /*#__PURE__*/React.createElement(DayPickerInput, {\n      onDayChange: this.handleDayChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(CalendarDays // First day. Default = new Date()\n    , {\n      firstDate: \"2019-07-05\" // Last day. You can specify number of days instead\n      ,\n      lastDate: \"2019-07-20\" // You can use numberOfDays instead of lastDate. Default = 30\n      ,\n      numberOfDays: 60 // Initial selected day. Default = firstDate\n      ,\n      selectedDate: \"2019-07-10\" // Text to display instead of week day in disables days\n      ,\n      disabledText: 'closed' // scrollView width\n      ,\n      width: 240 // Instead of width you can specify number of days visible Each day box width = 120\n      ,\n      daysInView: 3 // Only available if width % 120 = 0. Scroll by full width\n      ,\n      paginate: true // Array of disabled dates. Default [] \n      ,\n      disabledDates: ['2019-07-11', '2019-07-12', '2019-07-15'] // Function to get selected date in 'YYYY-MM-DD' format\n      ,\n      onDateSelect: date => this.changeSelectedDate(date),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      className: classes.table,\n      \"aria-label\": \"simple table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, \"State\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, \"Cases\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }, \"Deaths\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map((dat, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 19\n      }\n    }, dat.state), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 19\n      }\n    }, dat.cases), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 19\n      }\n    }, dat.deaths)))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sevi/Desktop/corona/client/src/App.js"],"names":["React","Component","axios","ReactMapboxGl","Layer","Feature","GeoJSONLayer","MapboxGL","DayPickerInput","CalendarDays","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Map","accessToken","scrollZoom","linePaint","fillPaint","stateDataQuery","geojsonQuery","dateSelection","useStyles","table","minWidth","newgeojson","geojsonList","push","App","constructor","props","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","selectedDay","geojson","changeSelectedDate","date","console","log","setState","selectedDate","getDataFromDb","fetch","then","json","res","catch","err","getGeojson","handleDayChange","bind","formatDate","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","classes","justifyContent","height","width","map","gl","index","dat","cases","deaths"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\nimport axios from 'axios';\n// Mapbox\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\nimport * as MapboxGL from 'mapbox-gl';\n// DayPicker\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n// CalendarDays\nimport CalendarDays from 'react-native-calendar-slider-carousel';\n// Material UI\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n// map init\nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ',\n  scrollZoom: false,\n});\n\n// map styles\nconst linePaint: MapboxGL.LinePaint = {\n  'line-color': 'white',\n  'line-width': 2,\n};\nconst fillPaint: MapboxGL.fillPaint = {\n  \"fill-color\": \"white\",\n  \"fill-opacity\": 0.7,\n}\n\n// api calls\nconst stateDataQuery = '/api/getStateData?date=';\nconst geojsonQuery = '/api/getGeojsonData?date=';\nvar dateSelection = '2020-01-21';\n\n// table styles\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 400,\n  },\n});\n\nvar newgeojson = {}\nnewgeojson['geojson'] = {'type': 'FeatureCollection', 'features': []};\nnewgeojson['fillPaint'] = fillPaint;\n\nvar geojsonList = [];\ngeojsonList.push(newgeojson);\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n    selectedDay: dateSelection,\n    geojson: geojsonList,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleDayChange = this.handleDayChange.bind(this);\n  }\n  \n  formatDate(date) {\n      var d = new Date(date),\n          month = '' + (d.getMonth() + 1),\n          day = '' + d.getDate(),\n          year = d.getFullYear();\n\n      if (month.length < 2) \n          month = '0' + month;\n      if (day.length < 2) \n          day = '0' + day;\n\n      return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    var date = this.formatDate(day);\n    this.setState({ selectedDay: date });\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n  }\n\n  changeSelectedDate = date => {\n    console.log(date); // \"2019-07-20\"\n    \n    this.setState({\n      selectedDate: date,\n     });\n  };\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb(stateDataQuery, dateSelection);\n    this.getGeojson(geojsonQuery, dateSelection);\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, dateSelection), 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = (stateDataQuery, dateSelection) => {\n    fetch(stateDataQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data}))\n      .catch((err) => console.log(err));\n  };\n\n  // supply the states geojson data\n  getGeojson = (geojsonQuery, dateSelection) => {\n    fetch(geojsonQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ geojson: res.geojson }))\n      .catch((err) => console.log(err));\n  };\n\n  // update geojson one by one\n  // updateGeojson = (geojsonQuery, dateSelection) => {\n  //   fetch(geojsonQuery + dateSelection)\n  //     .then((data) => data.json())\n  //     .then((res) => this.setState(state => {\n  //       const gList = \n  //     }))\n  // }\n\n  render() {\n    const { data } = this.state;\n\n    const geojson = this.state.geojson;\n\n    const { selectedDay } = this.state;\n    const classes = useStyles;\n\n    return (\n      <div style={{justifyContent: 'center'}}>\n        <Map\n          style=\"mapbox://styles/mapbox/dark-v10\"\n          center= {[-97,39]}          \n          containerStyle={{\n            height: '75vh',\n            width: '99vw'\n          }}\n          zoom={[3]}\n          id='map'\n        >\n        {geojson.length <= 0 \n        ? 'NO GEOJSON'\n        : geojson.map((gl, index) => (\n          <GeoJSONLayer key={index}\n            data={gl.geojson}\n            fillPaint={gl.fillPaint}\n            linePaint={linePaint}\n          />\n          ))}\n        </Map>\n        <p>Day: { selectedDay }</p>\n        <DayPickerInput onDayChange={this.handleDayChange} />\n        <CalendarDays\n          // First day. Default = new Date()\n          firstDate={\"2019-07-05\"}\n          // Last day. You can specify number of days instead\n          lastDate={\"2019-07-20\"}\n          // You can use numberOfDays instead of lastDate. Default = 30\n          numberOfDays={60}\n          // Initial selected day. Default = firstDate\n          selectedDate={\"2019-07-10\"}\n          // Text to display instead of week day in disables days\n          disabledText={'closed'}\n          // scrollView width\n          width={240}\n          // Instead of width you can specify number of days visible Each day box width = 120\n          daysInView={3}\n          // Only available if width % 120 = 0. Scroll by full width\n          paginate\n          // Array of disabled dates. Default [] \n          disabledDates={['2019-07-11', '2019-07-12', '2019-07-15']}\n          // Function to get selected date in 'YYYY-MM-DD' format\n          onDateSelect={date => this.changeSelectedDate(date)}\n        />\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>State</TableCell>\n                <TableCell align=\"right\">Cases</TableCell>\n                <TableCell align=\"right\">Deaths</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.length <= 0\n              ? 'NO DB ENTRIES YET'\n              : data.map((dat, index) => (\n                <TableRow key={index}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {dat.state}\n                  </TableCell>\n                  <TableCell align=\"right\">{dat.cases}</TableCell>\n                  <TableCell align=\"right\">{dat.deaths}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n      </div>      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}