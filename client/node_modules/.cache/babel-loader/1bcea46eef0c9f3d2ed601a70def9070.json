{"ast":null,"code":"var _jsxFileName = \"/Users/sevi/Desktop/corona/client/src/App.js\";\nimport React, { Component } from 'react'; // import ReactDOM from 'react-dom';\n\nimport axios from 'axios'; // Mapbox\n\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\nimport * as MapboxGL from 'mapbox-gl'; // DayPicker\n\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css'; // Material UI\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper'; // map init\n\nconst Map = ReactMapboxGl({\n  accessToken: 'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ',\n  scrollZoom: false\n}); // map styles\n\nconst linePaint = {\n  'line-color': 'white',\n  'line-width': 2\n};\nconst fillPaint = {\n  \"fill-color\": \"white\",\n  \"fill-opacity\": 0.7\n}; // api calls\n\nconst stateDataQuery = '/api/getStateData?date=';\nconst geojsonQuery = '/api/getGeojsonData?date=';\nvar dateSelection = '2020-01-21'; // table styles\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 400\n  }\n});\nvar newgeojson = {};\nnewgeojson['geojson'] = {\n  'type': 'FeatureCollection',\n  'features': []\n};\nnewgeojson['fillPaint'] = fillPaint;\nvar geojsonList = [];\ngeojsonList.push(newgeojson);\n\nclass App extends Component {\n  // initialize our state\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null,\n      selectedDay: dateSelection,\n      geojson: geojsonList,\n      lng: 5,\n      lat: 34,\n      zoom: 2\n    };\n\n    this.getDataFromDb = (stateDataQuery, dateSelection) => {\n      fetch(stateDataQuery + dateSelection).then(data => data.json()).then(res => this.setState({\n        data: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getGeojson = (geojsonQuery, dateSelection) => {\n      fetch(geojsonQuery + dateSelection).then(data => data.json()).then(res => this.setState({\n        geojson: res.geojson\n      })).catch(err => console.log(err));\n    };\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.myRef = React.createRef();\n  }\n\n  formatDate(date) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    var date = this.formatDate(day);\n    this.setState({\n      selectedDay: date\n    });\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n  } // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n\n\n  componentDidMount() {\n    this.getDataFromDb(stateDataQuery, dateSelection);\n    this.getGeojson(geojsonQuery, dateSelection);\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, dateSelection), 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n\n    const map = this.myRef.current;\n    map.loadImage('https://upload.wikimedia.org/wikipedia/commons/7/7c/201408_cat.png', function (error, image) {\n      if (error) throw error;\n      map.addImage('cat', image);\n      map.addSource('point', {\n        'type': 'geojson',\n        'data': {\n          'type': 'FeatureCollection',\n          'features': [{\n            'type': 'Feature',\n            'geometry': {\n              'type': 'Point',\n              'coordinates': [0, 0]\n            }\n          }]\n        }\n      });\n      map.addLayer({\n        'id': 'points',\n        'type': 'symbol',\n        'source': 'point',\n        'layout': {\n          'icon-image': 'cat',\n          'icon-size': 0.25\n        }\n      });\n    });\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // update geojson one by one\n  // updateGeojson = (geojsonQuery, dateSelection) => {\n  //   fetch(geojsonQuery + dateSelection)\n  //     .then((data) => data.json())\n  //     .then((res) => this.setState(state => {\n  //       const gList = \n  //     }))\n  // }\n  render() {\n    const {\n      data\n    } = this.state;\n    const geojson = this.state.geojson;\n    const {\n      selectedDay\n    } = this.state;\n    const classes = useStyles;\n    const {\n      isShown\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      ref: this.myRef,\n      style: \"mapbox://styles/mapbox/dark-v10\",\n      center: [-97, 39],\n      containerStyle: {\n        height: '75vh',\n        width: '99vw'\n      },\n      zoom: [3],\n      id: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, geojson.length <= 0 ? 'NO GEOJSON' : geojson.map((gl, index) => /*#__PURE__*/React.createElement(GeoJSONLayer, {\n      key: index,\n      data: gl.geojson,\n      fillPaint: gl.fillPaint,\n      linePaint: linePaint,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }, \"Day: \", selectedDay), /*#__PURE__*/React.createElement(DayPickerInput, {\n      onDayChange: this.handleDayChange,\n      selectedDay: this.state.selectedDay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      className: classes.table,\n      \"aria-label\": \"simple table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }\n    }, \"State\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }\n    }, \"Cases\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }\n    }, \"Deaths\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map((dat, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 19\n      }\n    }, dat.state), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 19\n      }\n    }, dat.cases), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 19\n      }\n    }, dat.deaths)))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sevi/Desktop/corona/client/src/App.js"],"names":["React","Component","axios","ReactMapboxGl","Layer","Feature","GeoJSONLayer","MapboxGL","DayPickerInput","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Map","accessToken","scrollZoom","linePaint","fillPaint","stateDataQuery","geojsonQuery","dateSelection","useStyles","table","minWidth","newgeojson","geojsonList","push","App","constructor","props","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","selectedDay","geojson","lng","lat","zoom","getDataFromDb","fetch","then","json","res","setState","catch","err","console","log","getGeojson","handleDayChange","bind","myRef","createRef","formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","componentDidMount","interval","setInterval","map","current","loadImage","error","image","addImage","addSource","addLayer","componentWillUnmount","clearInterval","render","classes","isShown","justifyContent","height","width","gl","index","el","mapContainer","dat","cases","deaths"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\nimport axios from 'axios';\n// Mapbox\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\nimport * as MapboxGL from 'mapbox-gl';\n// DayPicker\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n// Material UI\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n// map init\nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ',\n  scrollZoom: false,\n});\n\n// map styles\nconst linePaint: MapboxGL.LinePaint = {\n  'line-color': 'white',\n  'line-width': 2,\n};\nconst fillPaint: MapboxGL.fillPaint = {\n  \"fill-color\": \"white\",\n  \"fill-opacity\": 0.7,\n}\n\n// api calls\nconst stateDataQuery = '/api/getStateData?date=';\nconst geojsonQuery = '/api/getGeojsonData?date=';\nvar dateSelection = '2020-01-21';\n\n// table styles\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 400,\n  },\n});\n\nvar newgeojson = {}\nnewgeojson['geojson'] = {'type': 'FeatureCollection', 'features': []};\nnewgeojson['fillPaint'] = fillPaint;\n\nvar geojsonList = [];\ngeojsonList.push(newgeojson);\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n    selectedDay: dateSelection,\n    geojson: geojsonList,\n    lng: 5,\n    lat: 34,\n    zoom: 2,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.myRef = React.createRef();\n  }\n  \n  formatDate(date) {\n      var d = new Date(date),\n          month = '' + (d.getMonth() + 1),\n          day = '' + d.getDate(),\n          year = d.getFullYear();\n\n      if (month.length < 2) \n          month = '0' + month;\n      if (day.length < 2) \n          day = '0' + day;\n\n      return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    var date = this.formatDate(day);\n    this.setState({ selectedDay: date });\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb(stateDataQuery, dateSelection);\n    this.getGeojson(geojsonQuery, dateSelection);\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, dateSelection), 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n\n    const map = this.myRef.current;\n    map.loadImage(\n      'https://upload.wikimedia.org/wikipedia/commons/7/7c/201408_cat.png',\n      function(error, image) {\n        if (error) throw error;\n        map.addImage('cat', image);\n        map.addSource('point', {\n          'type': 'geojson',\n          'data': {\n            'type': 'FeatureCollection',\n            'features': [\n              {\n                'type': 'Feature',\n                'geometry': {\n                  'type': 'Point',\n                  'coordinates': [0, 0]\n                }\n              }\n            ]\n          }\n        });\n        map.addLayer({\n          'id': 'points',\n          'type': 'symbol',\n          'source': 'point',\n          'layout': {\n            'icon-image': 'cat',\n            'icon-size': 0.25\n          }\n        });\n      }\n    );\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = (stateDataQuery, dateSelection) => {\n    fetch(stateDataQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data}))\n      .catch((err) => console.log(err));\n  };\n\n  // supply the states geojson data\n  getGeojson = (geojsonQuery, dateSelection) => {\n    fetch(geojsonQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ geojson: res.geojson }))\n      .catch((err) => console.log(err));\n  };\n\n  // update geojson one by one\n  // updateGeojson = (geojsonQuery, dateSelection) => {\n  //   fetch(geojsonQuery + dateSelection)\n  //     .then((data) => data.json())\n  //     .then((res) => this.setState(state => {\n  //       const gList = \n  //     }))\n  // }\n\n  render() {\n\n    const { data } = this.state;\n\n    const geojson = this.state.geojson;\n\n    const { selectedDay } = this.state;\n    const classes = useStyles;\n\n    const { isShown } = this.state;\n\n    return (\n      <div \n        style={{justifyContent: 'center'}} \n      >\n        <Map\n          ref={this.myRef}\n          style=\"mapbox://styles/mapbox/dark-v10\"\n          center= {[-97,39]}          \n          containerStyle={{\n            height: '75vh',\n            width: '99vw'\n          }}\n          zoom={[3]}\n          id='map'\n        >\n        {geojson.length <= 0 \n        ? 'NO GEOJSON'\n        : geojson.map((gl, index) => (\n          <GeoJSONLayer key={index}\n            data={gl.geojson}\n            fillPaint={gl.fillPaint}\n            linePaint={linePaint}\n          />\n          ))}\n        </Map> \n        <div ref={el => this.mapContainer = el} />\n        <p>Day: { selectedDay }</p>\n        <DayPickerInput \n          onDayChange={this.handleDayChange} \n          selectedDay={this.state.selectedDay}\n        />\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>State</TableCell>\n                <TableCell align=\"right\">Cases</TableCell>\n                <TableCell align=\"right\">Deaths</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.length <= 0\n              ? 'NO DB ENTRIES YET'\n              : data.map((dat, index) => (\n                <TableRow key={index}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {dat.state}\n                  </TableCell>\n                  <TableCell align=\"right\">{dat.cases}</TableCell>\n                  <TableCell align=\"right\">{dat.deaths}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n      </div>      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}