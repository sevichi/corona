{"ast":null,"code":"var _jsxFileName = \"/Users/sevi/Desktop/corona/client/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios'; // Mapbox\n\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl'; // DayPicker\n\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\nconst Map = ReactMapboxGl({\n  accessToken: 'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ'\n});\nconst stateDataQuery = '/api/getStateData?date=';\nvar dateSelection = '2020-04-17';\n\nclass App extends Component {\n  // initialize our state\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null,\n      selectedDay: '2020-04-17'\n    };\n\n    this.getDataFromDb = (stateDataQuery, dateSelection) => {\n      console.log(dateSelection);\n      fetch(stateDataQuery + dateSelection).then(data => data.json()).then(res => this.setState({\n        data: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.handleDayChange = this.handleDayChange.bind(this); // this.state = {\n    //   selectedDay: undefined,\n    // };\n  }\n\n  handleDayChange(day) {\n    this.setState({\n      selectedDay: day\n    });\n    console.log(day);\n    console.log(this.state.selectedDay);\n    this.getDataFromDb(stateDataQuery, this.state.selectedDay);\n  } // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n\n\n  componentDidMount() {\n    this.getDataFromDb(stateDataQuery, dateSelection);\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, dateSelection), 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  render() {\n    const {\n      data\n    } = this.state; // const { geojson } = this.state;\n\n    const {\n      selectedDay\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      style: \"mapbox://styles/mapbox/dark-v10\",\n      center: [-97, 39],\n      containerStyle: {\n        height: '75vh',\n        width: '90vw'\n      },\n      zoom: [3],\n      id: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Layer, {\n      type: \"symbol\",\n      id: \"marker\",\n      layout: {\n        'icon-image': 'harbor-15'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Feature, {\n      coordinates: [-0.13235092163085938, 51.518250335096376],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, \"Day: \", selectedDay), /*#__PURE__*/React.createElement(DayPickerInput, {\n      onDayChange: this.handleDayChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map((dat, index) => /*#__PURE__*/React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 19\n      }\n    }, \" State: \"), \" \", dat.state, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 79\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }, \" Cases: \"), \" \", dat.cases, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 79\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }\n    }, \" Deaths: \"), \" \", dat.deaths))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sevi/Desktop/corona/client/src/App.js"],"names":["React","Component","axios","ReactMapboxGl","Layer","Feature","GeoJSONLayer","DayPickerInput","Map","accessToken","stateDataQuery","dateSelection","App","constructor","props","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","selectedDay","getDataFromDb","console","log","fetch","then","json","res","setState","catch","err","handleDayChange","bind","day","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","height","width","length","map","dat","index","padding","color","cases","deaths"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n// Mapbox\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\n// DayPicker\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n \nconst Map = ReactMapboxGl({\n  accessToken:\n    'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ'\n});\n\nconst stateDataQuery = '/api/getStateData?date=';\nvar dateSelection = '2020-04-17';\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n    selectedDay: '2020-04-17',\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleDayChange = this.handleDayChange.bind(this);\n    // this.state = {\n    //   selectedDay: undefined,\n    // };\n  }\n\n  handleDayChange(day) {\n    this.setState({ selectedDay: day });\n    console.log(day);\n    console.log(this.state.selectedDay);\n    this.getDataFromDb(stateDataQuery, this.state.selectedDay);\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb(stateDataQuery, dateSelection);\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, dateSelection), 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = (stateDataQuery, dateSelection) => {\n    console.log(dateSelection);\n    fetch(stateDataQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data }))\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    const { data } = this.state;\n    // const { geojson } = this.state;\n    const { selectedDay } = this.state;\n    return (\n      <div>\n        <Map\n          style=\"mapbox://styles/mapbox/dark-v10\"\n          center= {[-97,39]}          \n          containerStyle={{\n            height: '75vh',\n            width: '90vw'\n          }}\n          zoom={[3]}\n          id='map'\n        >\n          <Layer type=\"symbol\" id=\"marker\" layout={{ 'icon-image': 'harbor-15' }}>\n            <Feature coordinates={[-0.13235092163085938,51.518250335096376]} />\n          </Layer>\n        </Map>\n        <p>Day: { selectedDay }</p>\n        <DayPickerInput onDayChange={this.handleDayChange} />\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat, index) => (\n                <li style={{ padding: '10px' }} key={index}>\n                  <span style={{ color: 'gray' }}> State: </span> {dat.state} <br/>\n                  <span style={{ color: 'gray' }}> Cases: </span> {dat.cases} <br/>\n                  <span style={{ color: 'gray' }}> Deaths: </span> {dat.deaths}\n                </li>\n              ))}\n        </ul>\n      </div>      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}