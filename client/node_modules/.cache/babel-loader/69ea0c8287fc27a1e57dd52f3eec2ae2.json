{"ast":null,"code":"var _jsxFileName = \"/Users/sevi/Desktop/corona/client/src/App.js\";\nimport React, { Component } from 'react'; // import ReactDOM from 'react-dom';\n\nimport axios from 'axios'; // Mapbox\n\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl'; // import * as MapboxGL from 'mapbox-gl';\n\nimport mapboxgl from 'mapbox-gl'; // DayPicker\n\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css'; // Material UI\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper'; // map init\n\nconst accessToken = 'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ';\nvar stateColors = {};\nvar hoverCount = 0; // map styles\n\nconst linePaint = {\n  'line-color': 'white',\n  'line-width': 2\n};\nconst fillPaint = {\n  \"fill-color\": \"white\",\n  \"fill-opacity\": 0.7\n}; // api calls\n\nconst stateDataQuery = '/api/getStateData?date=';\nconst geojsonQuery = '/api/getGeojsonData?date=';\nvar dateSelection = '2020-1-21'; // table styles\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 400\n  }\n});\nvar newgeojson = {};\nnewgeojson['geojson'] = {\n  'type': 'FeatureCollection',\n  'features': []\n};\nnewgeojson['fillPaint'] = fillPaint;\nvar geojsonList = [];\ngeojsonList.push(newgeojson);\n\nclass App extends Component {\n  // initialize our state\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null,\n      selectedDay: dateSelection,\n      geojson: geojsonList,\n      lng: 5,\n      lat: 34,\n      zoom: 2\n    };\n\n    this.setDate = newDate => {\n      const date = newDate || new Date();\n      this.setState({\n        selectedDay: date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n      });\n    };\n\n    this.getPreviousDate = () => {\n      const {\n        selectedDay\n      } = this.state;\n      const currentDayInMilli = new Date(selectedDay).getTime();\n      const oneDay = 1000 * 60 * 60 * 24;\n      const previousDayInMilli = currentDayInMilli - oneDay;\n      const previousDate = new Date(previousDayInMilli); // this.setDate(previousDate)\n\n      this.handleDayChange(previousDate);\n    };\n\n    this.getNextDate = () => {\n      const {\n        selectedDay\n      } = this.state;\n      const currentDayInMilli = new Date(selectedDay).getTime();\n      const oneDay = 1000 * 60 * 60 * 24;\n      const nextDayInMilli = currentDayInMilli + oneDay;\n      const nextDate = new Date(nextDayInMilli); // this.setDate(nextDate)\n\n      this.handleDayChange(nextDate);\n    };\n\n    this.getDataFromDb = (stateDataQuery, dateSelection) => {\n      fetch(stateDataQuery + dateSelection).then(data => data.json()).then(res => this.setState({\n        data: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getGeojson = (geojsonQuery, dateSelection) => {\n      fetch(geojsonQuery + dateSelection).then(data => data.json()).then(res => this.setState({\n        geojson: res.geojson\n      })).catch(err => console.log(err));\n    };\n\n    this.updateGeojson = () => {\n      fetch(geojsonQuery + dateSelection).then(data => data.json()).then(res => {\n        const geojson = this.state.geojson;\n        geojson.forEach(st => {\n          this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', st.fillPaint['fill-color']);\n          stateColors[st.geojson.features[0].properties.name] = st.fillPaint['fill-color'];\n        });\n      });\n    };\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.colorLegend = React.createRef();\n  }\n\n  formatDate(date) {\n    var d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    const date = this.formatDate(day); // this.setState({ selectedDay: date });\n\n    this.setDate(day);\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n    this.updateGeojson();\n  }\n\n  // color function\n  getColor(c) {\n    return c > 10000 ? '#800026' : c > 5000 ? '#BD0026' : c > 1000 ? '#E31A1C' : c > 500 ? '#FC4E2A' : c > 100 ? '#FD8D3C' : c > 10 ? '#FEB24C' : c > 0 ? '#FED976' : '#FFEDA0';\n  } // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n\n\n  componentDidMount() {\n    const date = this.formatDate(dateSelection);\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, date), 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    } // load the color legend\n\n\n    const cl = this.colorLegend.current;\n    var grades = [0, 10, 100, 500, 1000, 5000, 10000];\n\n    for (var i = 0; i < grades.length; i++) {\n      console.log(this.getColor(grades[i] + 1));\n      cl.innerHTML += '<i style=\"background:' + this.getColor(grades[i] + 1) + ';width: 18px;height: 18px;position: absolute;float: left;margin-right: 8px;opacity: 0.7;\"></i> ' + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');\n    } // mapbox init\n\n\n    mapboxgl.accessToken = accessToken;\n    this.map = new mapboxgl.Map({\n      container: 'map',\n      // html element id in render\n      style: 'mapbox://styles/mapbox/dark-v10',\n      center: [-97, 39],\n      // note: lon comes before lat\n      zoom: [3],\n      scrollZoom: false\n    }); // mapbox onload\n\n    this.map.on('load', async () => {\n      var prevColor = '';\n      await fetch(geojsonQuery + dateSelection).then(() => {\n        // const geojson = this.state.geojson;\n        this.state.geojson.forEach(st => {\n          stateColors[st.geojson.features[0].properties.name] = st.fillPaint['fill-color'];\n          this.map.addSource(st.geojson.features[0].id, {\n            type: 'geojson',\n            data: st.geojson\n          });\n          this.map.addLayer({\n            id: st.geojson.features[0].properties.name,\n            type: 'fill',\n            source: st.geojson.features[0].id,\n            paint: st.fillPaint\n          });\n          this.map.on('mouseenter', st.geojson.features[0].properties.name, () => {\n            hoverCount++;\n\n            if (hoverCount) {\n              this.map.getCanvas().style.cursor = 'pointer';\n            }\n\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-opacity', 0.5);\n            prevColor = this.map.getLayer(st.geojson.features[0].properties.name);\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', 'white');\n          });\n          this.map.on('mouseleave', st.geojson.features[0].properties.name, () => {\n            hoverCount--;\n\n            if (hoverCount == 0) {\n              this.map.getCanvas().style.cursor = '';\n            }\n\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-opacity', 0.7);\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', stateColors[st.geojson.features[0].properties.name]);\n          });\n        });\n      });\n    });\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  render() {\n    const {\n      data\n    } = this.state;\n    const {\n      selectedDay\n    } = this.state;\n    const classes = useStyles;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        justifyContent: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"map\",\n      style: {\n        position: 'block',\n        top: 0,\n        bottom: 0,\n        width: '99vw',\n        height: '75vh'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.colorLegend,\n      style: {\n        'line-height': '18px',\n        'text-align': 'left',\n        'color': '#555',\n        'padding': '6px 8px',\n        'font': '14px/16px Arial, Helvetica, sans-serif',\n        'background': 'white',\n        'background': 'rgba(255,255,255,0.7)',\n        'box-shadow': '0 0 15px rgba(0,0,0,0.2)',\n        'position': 'absolute',\n        'z-index': '1 !important',\n        'top': '50%',\n        'left': '2%',\n        'white-space': 'normal'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }\n    }, \"Day: \", selectedDay), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.getPreviousDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }\n    }, \"Previous\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.getNextDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }\n    }, \"Next\"), /*#__PURE__*/React.createElement(DayPickerInput, {\n      onDayChange: this.handleDayChange,\n      selectedDay: this.state.selectedDay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TableContainer, {\n      component: Paper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      className: classes.table,\n      \"aria-label\": \"simple table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 17\n      }\n    }, \"State\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }\n    }, \"Cases\"), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }\n    }, \"Deaths\"))), /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 13\n      }\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map((dat, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      component: \"th\",\n      scope: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 19\n      }\n    }, dat.state), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 19\n      }\n    }, dat.cases), /*#__PURE__*/React.createElement(TableCell, {\n      align: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 19\n      }\n    }, dat.deaths)))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sevi/Desktop/corona/client/src/App.js"],"names":["React","Component","axios","ReactMapboxGl","Layer","Feature","GeoJSONLayer","mapboxgl","DayPickerInput","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","accessToken","stateColors","hoverCount","linePaint","fillPaint","stateDataQuery","geojsonQuery","dateSelection","useStyles","table","minWidth","newgeojson","geojsonList","push","App","constructor","props","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","selectedDay","geojson","lng","lat","zoom","setDate","newDate","date","Date","setState","getFullYear","getMonth","getDate","getPreviousDate","currentDayInMilli","getTime","oneDay","previousDayInMilli","previousDate","handleDayChange","getNextDate","nextDayInMilli","nextDate","getDataFromDb","fetch","then","json","res","catch","err","console","log","getGeojson","updateGeojson","forEach","st","map","setPaintProperty","features","properties","name","bind","colorLegend","createRef","formatDate","d","month","day","year","length","join","getColor","c","componentDidMount","interval","setInterval","cl","current","grades","i","innerHTML","Map","container","style","center","scrollZoom","on","prevColor","addSource","type","addLayer","source","paint","getCanvas","cursor","getLayer","componentWillUnmount","clearInterval","render","classes","justifyContent","position","top","bottom","width","height","dat","index","cases","deaths"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import ReactDOM from 'react-dom';\nimport axios from 'axios';\n// Mapbox\nimport ReactMapboxGl, { Layer, Feature, GeoJSONLayer } from 'react-mapbox-gl';\n// import * as MapboxGL from 'mapbox-gl';\nimport mapboxgl from 'mapbox-gl';\n// DayPicker\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\n// Material UI\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n// map init\nconst accessToken = 'pk.eyJ1Ijoic2V2aWNoaSIsImEiOiJjazlqNzJmeGcxaDFuM2Vud3RjeGFhNDBnIn0.O2duU4NkncmDSjjjzzd5uQ';\nvar stateColors = {};\nvar hoverCount = 0;\n\n// map styles\nconst linePaint: MapboxGL.LinePaint = {\n  'line-color': 'white',\n  'line-width': 2,\n};\nconst fillPaint: MapboxGL.fillPaint = {\n  \"fill-color\": \"white\",\n  \"fill-opacity\": 0.7,\n}\n\n// api calls\nconst stateDataQuery = '/api/getStateData?date=';\nconst geojsonQuery = '/api/getGeojsonData?date=';\nvar dateSelection = '2020-1-21';\n\n// table styles\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 400,\n  },\n});\n\nvar newgeojson = {}\nnewgeojson['geojson'] = {'type': 'FeatureCollection', 'features': []};\nnewgeojson['fillPaint'] = fillPaint;\n\nvar geojsonList = [];\ngeojsonList.push(newgeojson);\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n    selectedDay: dateSelection,\n    geojson: geojsonList,\n    lng: 5,\n    lat: 34,\n    zoom: 2,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.colorLegend = React.createRef();\n  }\n  \n  formatDate(date) {\n      var d = new Date(date),\n          month = '' + (d.getMonth() + 1),\n          day = '' + d.getDate(),\n          year = d.getFullYear();\n\n      if (month.length < 2) \n          month = '0' + month;\n      if (day.length < 2) \n          day = '0' + day;\n\n      return [year, month, day].join('-');\n  }\n\n  handleDayChange(day) {\n    const date = this.formatDate(day);\n    // this.setState({ selectedDay: date });\n    this.setDate(day);\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n    this.updateGeojson();\n  }\n\n  setDate = (newDate) => {\n    const date = newDate || new Date();\n    this.setState({\n      selectedDay:\n        date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate()\n    });\n  };\n\n  getPreviousDate = () => {\n    const { selectedDay } = this.state\n\n    const currentDayInMilli = new Date(selectedDay).getTime()\n    const oneDay = 1000 * 60 *60 *24\n    const previousDayInMilli = currentDayInMilli - oneDay\n    const previousDate = new Date(previousDayInMilli)\n\n    // this.setDate(previousDate)\n    this.handleDayChange(previousDate);\n  }\n\n  getNextDate = () => {\n    const { selectedDay } = this.state\n\n    const currentDayInMilli = new Date(selectedDay).getTime()\n    const oneDay = 1000 * 60 *60 *24\n    const nextDayInMilli = currentDayInMilli + oneDay\n    const nextDate = new Date(nextDayInMilli)\n\n    // this.setDate(nextDate)\n    this.handleDayChange(nextDate);\n  }\n\n  // color function\n  getColor(c) {\n    return c > 10000 ? '#800026' :\n           c > 5000  ? '#BD0026' :\n           c > 1000  ? '#E31A1C' :\n           c > 500   ? '#FC4E2A' :\n           c > 100   ? '#FD8D3C' :\n           c > 10    ? '#FEB24C' :\n           c > 0     ? '#FED976' :\n                       '#FFEDA0';\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    const date = this.formatDate(dateSelection);\n    this.getDataFromDb(stateDataQuery, date);\n    this.getGeojson(geojsonQuery, date);\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb(stateDataQuery, date), 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n\n    // load the color legend\n    const cl = this.colorLegend.current;\n    var grades = [0, 10, 100, 500, 1000, 5000, 10000];\n    for (var i = 0; i < grades.length; i++) {\n      console.log(this.getColor(grades[i] + 1));\n      cl.innerHTML += '<i style=\"background:' + this.getColor(grades[i] + 1) + \n      ';width: 18px;height: 18px;position: absolute;float: left;margin-right: 8px;opacity: 0.7;\"></i> ' \n      + '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');\n    }\n\n    // mapbox init\n    mapboxgl.accessToken = accessToken;\n    this.map = new mapboxgl.Map({\n      container: 'map', // html element id in render\n      style: 'mapbox://styles/mapbox/dark-v10',\n      center: [-97,39], // note: lon comes before lat\n      zoom: [3],\n      scrollZoom: false,\n    });\n\n    // mapbox onload\n    this.map.on('load', async() => {\n      var prevColor = '';\n      await fetch(geojsonQuery + dateSelection).then(() => {\n        // const geojson = this.state.geojson;\n        this.state.geojson.forEach(st => {\n          stateColors[st.geojson.features[0].properties.name] = st.fillPaint['fill-color'];\n          this.map.addSource(st.geojson.features[0].id, {\n            type: 'geojson',\n            data: st.geojson,\n          });\n\n          this.map.addLayer({\n            id: st.geojson.features[0].properties.name,\n            type: 'fill',\n            source: st.geojson.features[0].id,\n            paint: st.fillPaint,\n          });\n\n          this.map.on('mouseenter', st.geojson.features[0].properties.name, () => {\n            hoverCount++\n            if (hoverCount) {\n              this.map.getCanvas().style.cursor = 'pointer';\n            }\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-opacity', 0.5);\n            prevColor = this.map.getLayer(st.geojson.features[0].properties.name);\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', 'white');\n          });\n\n          this.map.on('mouseleave', st.geojson.features[0].properties.name, () => {\n            hoverCount--;\n            if (hoverCount == 0) {\n              this.map.getCanvas().style.cursor = '';\n            }\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-opacity', 0.7);\n            this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', stateColors[st.geojson.features[0].properties.name]);\n          });\n        });\n      });\n    });\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = (stateDataQuery, dateSelection) => {\n    fetch(stateDataQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.data}))\n      .catch((err) => console.log(err));\n  };\n\n  // supply the states geojson data\n  getGeojson = (geojsonQuery, dateSelection) => {\n    fetch(geojsonQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => this.setState({ geojson: res.geojson }))\n      .catch((err) => console.log(err));\n  };\n\n  updateGeojson = () => {\n    fetch(geojsonQuery + dateSelection)\n      .then((data) => data.json())\n      .then((res) => {\n        const geojson = this.state.geojson;\n        geojson.forEach(st => {\n          this.map.setPaintProperty(st.geojson.features[0].properties.name, 'fill-color', st.fillPaint['fill-color']);\n          stateColors[st.geojson.features[0].properties.name] = st.fillPaint['fill-color'];\n        });\n      });    \n  };\n\n  render() {\n\n    const { data } = this.state;\n    const { selectedDay } = this.state;\n    const classes = useStyles;\n\n    return (\n      <div \n        style={{justifyContent: 'center'}} \n      >\n        <div id='map' style={{\n          position: 'block',\n          top: 0,\n          bottom: 0,\n          width: '99vw',\n          height: '75vh',\n        }}/>\n        <div ref={this.colorLegend} style={{\n          'line-height': '18px',\n          'text-align': 'left',\n          'color': '#555',\n          'padding': '6px 8px',\n          'font': '14px/16px Arial, Helvetica, sans-serif',\n          'background': 'white',\n          'background': 'rgba(255,255,255,0.7)',\n          'box-shadow': '0 0 15px rgba(0,0,0,0.2)',\n          'position': 'absolute',\n          'z-index': '1 !important',\n          'top': '50%',\n          'left': '2%',\n          'white-space': 'normal',\n        }}></div>\n        <p>Day: { selectedDay }</p>\n        <button onClick={this.getPreviousDate}>Previous</button>\n        <button onClick={this.getNextDate}>Next</button>\n        <DayPickerInput \n          onDayChange={this.handleDayChange} \n          selectedDay={this.state.selectedDay}\n        />\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>State</TableCell>\n                <TableCell align=\"right\">Cases</TableCell>\n                <TableCell align=\"right\">Deaths</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.length <= 0\n              ? 'NO DB ENTRIES YET'\n              : data.map((dat, index) => (\n                <TableRow key={index}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {dat.state}\n                  </TableCell>\n                  <TableCell align=\"right\">{dat.cases}</TableCell>\n                  <TableCell align=\"right\">{dat.deaths}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}